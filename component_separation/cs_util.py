#provides some constants and file formatters

from enum import Enum
import json
import itertools
import numpy as np
import logging
import logging.handlers
import platform
import os
import component_separation
import functools


class Config():
    # LOGFILE = 'data/tmp/logging/messages.log'
    # logger = logging.getLogger("")
    # handler = logging.handlers.RotatingFileHandler(
    #         LOGFILE, maxBytes=(1048576*5), backupCount=0
    # )
    # formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    # handler.setFormatter(formatter)
    # logger.addHandler(handler)

    def __init__(self, cf=None):
        if cf is None:
            with open(os.path.dirname(component_separation.__file__)+'/config_ps.json', "r") as f:
                self.cf = json.load(f)
        else:
            self.cf = cf
        self.PLANCKMAPFREQ = [p.value for p in list(Planckf)]
        self.PLANCKSPECTRUM = [p.value for p in list(Plancks)]
        self.freqcomb =  ["{}-{}".format(FREQ,FREQ2)
            for FREQ, FREQ2  in itertools.product(self.PLANCKMAPFREQ,self.PLANCKMAPFREQ)
                if FREQ not in self.cf['pa']["freqfilter"] and
                (FREQ2 not in self.cf['pa']["freqfilter"]) and (int(FREQ2)>=int(FREQ))]
        
        
        self.PLANCKMAPFREQ_f = [FREQ for FREQ in self.PLANCKMAPFREQ
            if FREQ not in self.cf['pa']["freqfilter"]]
        if 'specfilter' in self.cf['pa'].keys():
            self.PLANCKSPECTRUM_f = [SPEC for SPEC in self.PLANCKSPECTRUM
                if SPEC not in self.cf['pa']["specfilter"]]
            self.speccomb  = [spec for spec in self.PLANCKSPECTRUM if spec not in self.cf['pa']["specfilter"]]
            self.specfilter = self.cf['pa']["specfilter"]
            self.Tscale = self.cf['pa']["Tscale"]
            self.binname = self.cf['pa']['binname']
            self.bins = getattr(Constants, self.binname)

        self.CB_color_cycle = ["#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288", "#AA4499", 
                             "#44AA99", "#999933", "#882255", "#661100", "#6699CC", "#888888"]
        self.freqdset = self.cf['pa']["freqdset"]
        self.freqfilter = self.cf['pa']["freqfilter"]
        if 'lmax' in self.cf['pa'].keys():
            self.lmax = self.cf['pa']["lmax"]
        self.overwrite_cache = self.cf['pa']['overwrite_cache']
        
        

        uname = platform.uname()
        if uname.node == "DESKTOP-KMIGUPV":
            self.mch = "XPS"
        else:
            self.mch = "NERSC"

        if "sim_id" in self.cf[self.mch][self.freqdset]:
            self.sim_id = self.cf[self.mch][self.freqdset]["sim_id"]
        else:
            self.sim_id = "0200"
        self.nside_out = self.cf['pa']['nside_out'] if self.cf['pa']['nside_out'] is not None else self.cf['pa']['nside_desc_map']


        print(40*"$")
        print("Run with the following settings:")
        print(self.cf['pa'])
        print(40*"$")

    def set_logger(loglevel=logging.INFO):
        logger.setLevel(loglevel)
        logging.StreamHandler(sys.stdout)


class Constants:
    SMICA_a_fit_bins = np.array([
    [1.000000000000000000e+02, 1.190000000000000000e+02],
    [1.200000000000000000e+02, 1.390000000000000000e+02],
    [1.400000000000000000e+02, 1.590000000000000000e+02],
    [1.600000000000000000e+02, 1.790000000000000000e+02],
    [1.800000000000000000e+02, 1.990000000000000000e+02],
    [2.000000000000000000e+02, 2.190000000000000000e+02],
    [2.200000000000000000e+02, 2.390000000000000000e+02],
    [2.400000000000000000e+02, 2.590000000000000000e+02],
    [2.600000000000000000e+02, 2.790000000000000000e+02],
    [2.800000000000000000e+02, 2.990000000000000000e+02],
    [3.000000000000000000e+02, 3.190000000000000000e+02],
    [3.200000000000000000e+02, 3.390000000000000000e+02],
    [3.400000000000000000e+02, 3.590000000000000000e+02],
    [3.600000000000000000e+02, 3.790000000000000000e+02],
    [3.800000000000000000e+02, 3.990000000000000000e+02],
    [4.000000000000000000e+02, 4.190000000000000000e+02],
    [4.200000000000000000e+02, 4.390000000000000000e+02],
    [4.400000000000000000e+02, 4.590000000000000000e+02],
    [4.600000000000000000e+02, 4.790000000000000000e+02],
    [4.800000000000000000e+02, 4.990000000000000000e+02],
    [5.000000000000000000e+02, 5.490000000000000000e+02],
    [5.500000000000000000e+02, 5.990000000000000000e+02],
    [6.000000000000000000e+02, 6.490000000000000000e+02],
    [6.500000000000000000e+02, 6.800000000000000000e+02],
    ])

    SMICA_lowell_bins = np.array([
    [5.000000000000000000e+00, 9.000000000000000000e+00],
    [1.000000000000000000e+01, 1.900000000000000000e+01],
    [2.000000000000000000e+01, 2.900000000000000000e+01],
    [3.000000000000000000e+01, 3.900000000000000000e+01],
    [4.000000000000000000e+01, 5.900000000000000000e+01],
    [6.000000000000000000e+01, 7.900000000000000000e+01],
    [8.000000000000000000e+01, 9.900000000000000000e+01],
    [1.000000000000000000e+02, 1.190000000000000000e+02],
    [1.200000000000000000e+02, 1.390000000000000000e+02],
    [1.400000000000000000e+02, 1.590000000000000000e+02]])

    SMICA_highell_bins = np.array([
    [2.000000000000000000e+00, 9.000000000000000000e+00],
    [1.000000000000000000e+01, 1.900000000000000000e+01],
    [2.000000000000000000e+01, 2.900000000000000000e+01],
    [3.000000000000000000e+01, 3.900000000000000000e+01],
    [4.000000000000000000e+01, 5.900000000000000000e+01],
    [6.000000000000000000e+01, 7.900000000000000000e+01],
    [8.000000000000000000e+01, 9.900000000000000000e+01],
    [1.000000000000000000e+02, 1.190000000000000000e+02],
    [1.200000000000000000e+02, 1.390000000000000000e+02],
    [1.400000000000000000e+02, 1.590000000000000000e+02],
    [1.600000000000000000e+02, 1.790000000000000000e+02],
    [1.800000000000000000e+02, 1.990000000000000000e+02],
    [2.000000000000000000e+02, 2.190000000000000000e+02],
    [2.200000000000000000e+02, 2.390000000000000000e+02],
    [2.400000000000000000e+02, 2.590000000000000000e+02],
    [2.600000000000000000e+02, 2.790000000000000000e+02],
    [2.800000000000000000e+02, 2.990000000000000000e+02],
    [3.000000000000000000e+02, 3.190000000000000000e+02],
    [3.200000000000000000e+02, 3.390000000000000000e+02],
    [3.400000000000000000e+02, 3.590000000000000000e+02],
    [3.600000000000000000e+02, 3.790000000000000000e+02],
    [3.800000000000000000e+02, 3.990000000000000000e+02],
    [4.000000000000000000e+02, 4.190000000000000000e+02],
    [4.200000000000000000e+02, 4.390000000000000000e+02],
    [4.400000000000000000e+02, 4.590000000000000000e+02],
    [4.600000000000000000e+02, 4.790000000000000000e+02],
    [4.800000000000000000e+02, 4.990000000000000000e+02],
    [5.000000000000000000e+02, 5.490000000000000000e+02],
    [5.500000000000000000e+02, 5.990000000000000000e+02],
    [6.000000000000000000e+02, 6.490000000000000000e+02],
    [6.500000000000000000e+02, 6.990000000000000000e+02],
    [7.000000000000000000e+02, 7.490000000000000000e+02],
    [7.500000000000000000e+02, 7.990000000000000000e+02],
    [8.000000000000000000e+02, 8.490000000000000000e+02],
    [8.500000000000000000e+02, 8.990000000000000000e+02],
    [9.000000000000000000e+02, 9.490000000000000000e+02],
    [9.500000000000000000e+02, 9.990000000000000000e+02]
    ], dtype=int)

    linear_equisized_bins_1 = np.array([[0.5, 1.5], [1.5, 2.5], 
    [2.5, 3.5], [3.5, 4.5], [4.5, 5.5], [5.5, 6.5], [6.5, 7.5], 
    [7.5, 8.5], [8.5, 9.5], [9.5, 10.5], [10.5, 11.5], [11.5, 12.5], 
    [12.5, 13.5], [13.5, 14.5], [14.5, 15.5], [15.5, 16.5], [16.5, 17.5], 
    [17.5, 18.5], [18.5, 19.5], [19.5, 20.5], [20.5, 21.5], [21.5, 22.5], [22.5, 23.5], [23.5, 24.5], [24.5, 25.5], [25.5, 26.5], [26.5, 27.5], 
    [27.5, 28.5], [28.5, 29.5], [29.5, 30.5], [30.5, 31.5], [31.5, 32.5], [32.5, 33.5], [33.5, 34.5], [34.5, 35.5], [35.5, 36.5], [36.5, 37.5], [37.5, 38.5], [38.5, 39.5], [39.5, 40.5], [40.5, 41.5], [41.5, 42.5], 
    [42.5, 43.5], [43.5, 44.5], [44.5, 45.5], [45.5, 46.5], [46.5, 47.5], [47.5, 48.5], [48.5, 49.5], [49.5, 50.5], [50.5, 51.5], [51.5, 52.5], [52.5, 53.5], 
    [53.5, 54.5], [54.5, 55.5], [55.5, 56.5], [56.5, 57.5], [57.5, 58.5], [58.5, 59.5], [59.5, 60.5], [60.5, 61.5], [61.5, 62.5], [62.5, 63.5], [63.5, 64.5], 
    [64.5, 65.5], [65.5, 66.5], [66.5, 67.5], [67.5, 68.5], [68.5, 69.5], [69.5, 70.5], [70.5, 71.5], [71.5, 72.5], [72.5, 73.5], [73.5, 74.5], [74.5, 75.5], 
    [75.5, 76.5], [76.5, 77.5], [77.5, 78.5], [78.5, 79.5], [79.5, 80.5], [80.5, 81.5], [81.5, 82.5], [82.5, 83.5], [83.5, 84.5], [84.5, 85.5], [85.5, 86.5], 
    [86.5, 87.5], [87.5, 88.5], [88.5, 89.5], [89.5, 90.5], [90.5, 91.5], [91.5, 92.5], [92.5, 93.5], [93.5, 94.5], [94.5, 95.5], [95.5, 96.5], [96.5, 97.5], 
    [97.5, 98.5], [98.5, 99.5], [99.5, 100.5], [100.5, 101.5], [101.5, 102.5], [102.5, 103.5], [103.5, 104.5], [104.5, 105.5], [105.5, 106.5], [106.5, 107.5], 
    [107.5, 108.5], [108.5, 109.5], [109.5, 110.5], [110.5, 111.5], [111.5, 112.5], [112.5, 113.5], [113.5, 114.5], [114.5, 115.5], [115.5, 116.5], 
    [116.5, 117.5], [117.5, 118.5], [118.5, 119.5], [119.5, 120.5], [120.5, 121.5], [121.5, 122.5], [122.5, 123.5], [123.5, 124.5], [124.5, 125.5], 
    [125.5, 126.5], [126.5, 127.5], [127.5, 128.5], [128.5, 129.5], [129.5, 130.5], [130.5, 131.5], [131.5, 132.5], [132.5, 133.5], [133.5, 134.5], 
    [134.5, 135.5], [135.5, 136.5], [136.5, 137.5], [137.5, 138.5], [138.5, 139.5], [139.5, 140.5], [140.5, 141.5], [141.5, 142.5], [142.5, 143.5], 
    [143.5, 144.5], [144.5, 145.5], [145.5, 146.5], [146.5, 147.5], [147.5, 148.5], [148.5, 149.5], [149.5, 150.5], [150.5, 151.5], [151.5, 152.5], 
    [152.5, 153.5], [153.5, 154.5], [154.5, 155.5], [155.5, 156.5], [156.5, 157.5], [157.5, 158.5], [158.5, 159.5], [159.5, 160.5], [160.5, 161.5], 
    [161.5, 162.5], [162.5, 163.5], [163.5, 164.5], [164.5, 165.5], [165.5, 166.5], [166.5, 167.5], [167.5, 168.5], [168.5, 169.5], [169.5, 170.5], 
    [170.5, 171.5], [171.5, 172.5], [172.5, 173.5], [173.5, 174.5], [174.5, 175.5], [175.5, 176.5], [176.5, 177.5], [177.5, 178.5], [178.5, 179.5], 
    [179.5, 180.5], [180.5, 181.5], [181.5, 182.5], [182.5, 183.5], [183.5, 184.5], [184.5, 185.5], [185.5, 186.5], [186.5, 187.5], [187.5, 188.5], 
    [188.5, 189.5], [189.5, 190.5], [190.5, 191.5], [191.5, 192.5], [192.5, 193.5], [193.5, 194.5], [194.5, 195.5], [195.5, 196.5], [196.5, 197.5], 
    [197.5, 198.5], [198.5, 199.5], [199.5, 200.5], [200.5, 201.5], [201.5, 202.5], [202.5, 203.5], [203.5, 204.5], [204.5, 205.5], [205.5, 206.5], 
    [206.5, 207.5], [207.5, 208.5], [208.5, 209.5], [209.5, 210.5], [210.5, 211.5], [211.5, 212.5], [212.5, 213.5], [213.5, 214.5], [214.5, 215.5], 
    [215.5, 216.5], [216.5, 217.5], [217.5, 218.5], [218.5, 219.5], [219.5, 220.5], [220.5, 221.5], [221.5, 222.5], [222.5, 223.5], [223.5, 224.5], 
    [224.5, 225.5], [225.5, 226.5], [226.5, 227.5], [227.5, 228.5], [228.5, 229.5], [229.5, 230.5], [230.5, 231.5], [231.5, 232.5], [232.5, 233.5], 
    [233.5, 234.5], [234.5, 235.5], [235.5, 236.5], [236.5, 237.5], [237.5, 238.5], [238.5, 239.5], [239.5, 240.5], [240.5, 241.5], [241.5, 242.5], 
    [242.5, 243.5], [243.5, 244.5], [244.5, 245.5], [245.5, 246.5], [246.5, 247.5], [247.5, 248.5], [248.5, 249.5], [249.5, 250.5], [250.5, 251.5], 
    [251.5, 252.5], [252.5, 253.5], [253.5, 254.5], [254.5, 255.5], [255.5, 256.5], [256.5, 257.5], [257.5, 258.5], [258.5, 259.5], [259.5, 260.5], 
    [260.5, 261.5], [261.5, 262.5], [262.5, 263.5], [263.5, 264.5], [264.5, 265.5], [265.5, 266.5], [266.5, 267.5], [267.5, 268.5], [268.5, 269.5], 
    [269.5, 270.5], [270.5, 271.5], [271.5, 272.5], [272.5, 273.5], [273.5, 274.5], [274.5, 275.5], [275.5, 276.5], [276.5, 277.5], [277.5, 278.5], 
    [278.5, 279.5], [279.5, 280.5], [280.5, 281.5], [281.5, 282.5], [282.5, 283.5], [283.5, 284.5], [284.5, 285.5], [285.5, 286.5], [286.5, 287.5], 
    [287.5, 288.5], [288.5, 289.5], [289.5, 290.5], [290.5, 291.5], [291.5, 292.5], [292.5, 293.5], [293.5, 294.5], [294.5, 295.5], [295.5, 296.5], 
    [296.5, 297.5], [297.5, 298.5], [298.5, 299.5], [299.5, 300.5], [300.5, 301.5], [301.5, 302.5], [302.5, 303.5], [303.5, 304.5], [304.5, 305.5], 
    [305.5, 306.5], [306.5, 307.5], [307.5, 308.5], [308.5, 309.5], [309.5, 310.5], [310.5, 311.5], [311.5, 312.5], [312.5, 313.5], [313.5, 314.5], 
    [314.5, 315.5], [315.5, 316.5], [316.5, 317.5], [317.5, 318.5], [318.5, 319.5], [319.5, 320.5], [320.5, 321.5], [321.5, 322.5], [322.5, 323.5], 
    [323.5, 324.5], [324.5, 325.5], [325.5, 326.5], [326.5, 327.5], [327.5, 328.5], [328.5, 329.5], [329.5, 330.5], [330.5, 331.5], [331.5, 332.5], 
    [332.5, 333.5], [333.5, 334.5], [334.5, 335.5], [335.5, 336.5], [336.5, 337.5], [337.5, 338.5], [338.5, 339.5], [339.5, 340.5], [340.5, 341.5], 
    [341.5, 342.5], [342.5, 343.5], [343.5, 344.5], [344.5, 345.5], [345.5, 346.5], [346.5, 347.5], [347.5, 348.5], [348.5, 349.5], [349.5, 350.5], 
    [350.5, 351.5], [351.5, 352.5], [352.5, 353.5], [353.5, 354.5], [354.5, 355.5], [355.5, 356.5], [356.5, 357.5], [357.5, 358.5], [358.5, 359.5], 
    [359.5, 360.5], [360.5, 361.5], [361.5, 362.5], [362.5, 363.5], [363.5, 364.5], [364.5, 365.5], [365.5, 366.5], [366.5, 367.5], [367.5, 368.5], 
    [368.5, 369.5], [369.5, 370.5], [370.5, 371.5], [371.5, 372.5], [372.5, 373.5], [373.5, 374.5], [374.5, 375.5], [375.5, 376.5], [376.5, 377.5], 
    [377.5, 378.5], [378.5, 379.5], [379.5, 380.5], [380.5, 381.5], [381.5, 382.5], [382.5, 383.5], [383.5, 384.5], [384.5, 385.5], [385.5, 386.5], 
    [386.5, 387.5], [387.5, 388.5], [388.5, 389.5], [389.5, 390.5], [390.5, 391.5], [391.5, 392.5], [392.5, 393.5], [393.5, 394.5], [394.5, 395.5], 
    [395.5, 396.5], [396.5, 397.5], [397.5, 398.5], [398.5, 399.5], [399.5, 400.5], [400.5, 401.5], [401.5, 402.5], [402.5, 403.5], [403.5, 404.5], 
    [404.5, 405.5], [405.5, 406.5], [406.5, 407.5], [407.5, 408.5], [408.5, 409.5], [409.5, 410.5], [410.5, 411.5], [411.5, 412.5], [412.5, 413.5], 
    [413.5, 414.5], [414.5, 415.5], 
    [415.5, 416.5], [416.5, 417.5], [417.5, 418.5], [418.5, 419.5], [419.5, 420.5], [420.5, 421.5], [421.5, 422.5], [422.5, 423.5], [423.5, 424.5], 
    [424.5, 425.5], [425.5, 426.5], [426.5, 427.5], [427.5, 428.5], [428.5, 429.5], [429.5, 430.5], [430.5, 431.5], [431.5, 432.5], [432.5, 433.5], 
    [433.5, 434.5], [434.5, 435.5], [435.5, 436.5], [436.5, 437.5], [437.5, 438.5], [438.5, 439.5], [439.5, 440.5], [440.5, 441.5], [441.5, 442.5], 
    [442.5, 443.5], [443.5, 444.5], [444.5, 445.5], [445.5, 446.5], [446.5, 447.5], [447.5, 448.5], [448.5, 449.5], [449.5, 450.5], [450.5, 451.5], 
    [451.5, 452.5], [452.5, 453.5], [453.5, 454.5], [454.5, 455.5], [455.5, 456.5], [456.5, 457.5], [457.5, 458.5], [458.5, 459.5], [459.5, 460.5], 
    [460.5, 461.5], [461.5, 462.5], [462.5, 463.5], [463.5, 464.5], [464.5, 465.5], [465.5, 466.5], [466.5, 467.5], [467.5, 468.5], [468.5, 469.5], 
    [469.5, 470.5], [470.5, 471.5], [471.5, 472.5], [472.5, 473.5], [473.5, 474.5], [474.5, 475.5], [475.5, 476.5], [476.5, 477.5], [477.5, 478.5], 
    [478.5, 479.5], [479.5, 480.5], [480.5, 481.5], [481.5, 482.5], [482.5, 483.5], [483.5, 484.5], [484.5, 485.5], [485.5, 486.5], [486.5, 487.5], 
    [487.5, 488.5], [488.5, 489.5], [489.5, 490.5], [490.5, 491.5], [491.5, 492.5], [492.5, 493.5], [493.5, 494.5], [494.5, 495.5], [495.5, 496.5], 
    [496.5, 497.5], [497.5, 498.5], [498.5, 499.5], [499.5, 500.5], [500.5, 501.5], [501.5, 502.5], [502.5, 503.5], [503.5, 504.5], [504.5, 505.5], 
    [505.5, 506.5], [506.5, 507.5], [507.5, 508.5], [508.5, 509.5], [509.5, 510.5], [510.5, 511.5], [511.5, 512.5], [512.5, 513.5], [513.5, 514.5], 
    [514.5, 515.5], [515.5, 516.5], [516.5, 517.5], [517.5, 518.5], [518.5, 519.5], [519.5, 520.5], [520.5, 521.5], [521.5, 522.5], [522.5, 523.5], 
    [523.5, 524.5], [524.5, 525.5], [525.5, 526.5], [526.5, 527.5], [527.5, 528.5], [528.5, 529.5], [529.5, 530.5], [530.5, 531.5], [531.5, 532.5], 
    [532.5, 533.5], [533.5, 534.5], [534.5, 535.5], 
    [535.5, 536.5], [536.5, 537.5], [537.5, 538.5], [538.5, 539.5], [539.5, 540.5], [540.5, 541.5], [541.5, 542.5], [542.5, 543.5], [543.5, 544.5], 
    [544.5, 545.5], [545.5, 546.5], [546.5, 547.5], [547.5, 548.5], [548.5, 549.5], [549.5, 550.5], [550.5, 551.5], [551.5, 552.5], [552.5, 553.5], 
    [553.5, 554.5], [554.5, 555.5], [555.5, 556.5], [556.5, 557.5], [557.5, 558.5], [558.5, 559.5], [559.5, 560.5], [560.5, 561.5], [561.5, 562.5], 
    [562.5, 563.5], [563.5, 564.5], [564.5, 565.5], [565.5, 566.5], [566.5, 567.5], [567.5, 568.5], [568.5, 569.5], [569.5, 570.5], [570.5, 571.5], 
    [571.5, 572.5], [572.5, 573.5], [573.5, 574.5], [574.5, 575.5], [575.5, 576.5], [576.5, 577.5], [577.5, 578.5], [578.5, 579.5], [579.5, 580.5], 
    [580.5, 581.5], [581.5, 582.5], [582.5, 583.5], [583.5, 584.5], [584.5, 585.5], [585.5, 586.5], [586.5, 587.5], [587.5, 588.5], [588.5, 589.5], 
    [589.5, 590.5], [590.5, 591.5], [591.5, 592.5], [592.5, 593.5], [593.5, 594.5], [594.5, 595.5], [595.5, 596.5], [596.5, 597.5], [597.5, 598.5], 
    [598.5, 599.5], [599.5, 600.5], [600.5, 601.5], [601.5, 602.5], [602.5, 603.5], [603.5, 604.5], [604.5, 605.5], [605.5, 606.5], [606.5, 607.5], 
    [607.5, 608.5], [608.5, 609.5], [609.5, 610.5], [610.5, 611.5], [611.5, 612.5], [612.5, 613.5], [613.5, 614.5], [614.5, 615.5], [615.5, 616.5], 
    [616.5, 617.5], [617.5, 618.5], [618.5, 619.5], [619.5, 620.5], [620.5, 621.5], [621.5, 622.5], [622.5, 623.5], [623.5, 624.5], [624.5, 625.5], 
    [625.5, 626.5], [626.5, 627.5], [627.5, 628.5], [628.5, 629.5], [629.5, 630.5], [630.5, 631.5], [631.5, 632.5], [632.5, 633.5], [633.5, 634.5], 
    [634.5, 635.5], [635.5, 636.5], [636.5, 637.5], [637.5, 638.5], [638.5, 639.5], [639.5, 640.5], [640.5, 641.5], [641.5, 642.5], [642.5, 643.5], 
    [643.5, 644.5], [644.5, 645.5], [645.5, 646.5], [646.5, 647.5], [647.5, 648.5], [648.5, 649.5], [649.5, 650.5], [650.5, 651.5], [651.5, 652.5], 
    [652.5, 653.5], [653.5, 654.5], [654.5, 655.5], [655.5, 656.5], [656.5, 657.5], [657.5, 658.5], [658.5, 659.5], [659.5, 660.5], [660.5, 661.5], 
    [661.5, 662.5], [662.5, 663.5], [663.5, 664.5], [664.5, 665.5], [665.5, 666.5], [666.5, 667.5], [667.5, 668.5], [668.5, 669.5], [669.5, 670.5], 
    [670.5, 671.5], [671.5, 672.5], [672.5, 673.5], [673.5, 674.5], [674.5, 675.5], [675.5, 676.5], [676.5, 677.5], [677.5, 678.5], [678.5, 679.5], 
    [679.5, 680.5], [680.5, 681.5], [681.5, 682.5], [682.5, 683.5], [683.5, 684.5], [684.5, 685.5], [685.5, 686.5], [686.5, 687.5], [687.5, 688.5], 
    [688.5, 689.5], [689.5, 690.5], [690.5, 691.5], [691.5, 692.5], [692.5, 693.5], [693.5, 694.5], [694.5, 695.5], [695.5, 696.5], [696.5, 697.5], 
    [697.5, 698.5], [698.5, 699.5], [699.5, 700.5], [700.5, 701.5], [701.5, 702.5], [702.5, 703.5], [703.5, 704.5], [704.5, 705.5], [705.5, 706.5], 
    [706.5, 707.5], [707.5, 708.5], 
    [708.5, 709.5], [709.5, 710.5], [710.5, 711.5], [711.5, 712.5], [712.5, 713.5], [713.5, 714.5], [714.5, 715.5], [715.5, 716.5], [716.5, 717.5], 
    [717.5, 718.5], [718.5, 719.5], [719.5, 720.5], [720.5, 721.5], [721.5, 722.5], [722.5, 723.5], [723.5, 724.5], [724.5, 725.5], [725.5, 726.5], 
    [726.5, 727.5], [727.5, 728.5], [728.5, 729.5], [729.5, 730.5], [730.5, 731.5], [731.5, 732.5], [732.5, 733.5], [733.5, 734.5], [734.5, 735.5], 
    [735.5, 736.5], [736.5, 737.5], [737.5, 738.5], [738.5, 739.5], [739.5, 740.5], [740.5, 741.5], [741.5, 742.5], [742.5, 743.5], [743.5, 744.5], 
    [744.5, 745.5], [745.5, 746.5], [746.5, 747.5], [747.5, 748.5], [748.5, 749.5], [749.5, 750.5]], dtype=int)

    linear_equisized_bins_10 = np.array([
       [   0,    9],
       [  10,   19],
       [  20,   29],
       [  30,   39],
       [  40,   49],
       [  50,   59],
       [  60,   69],
       [  70,   79],
       [  80,   89],
       [  90,   99],
       [ 100,  109],
       [ 110,  119],
       [ 120,  129],
       [ 130,  139],
       [ 140,  149],
       [ 150,  159],
       [ 160,  169],
       [ 170,  179],
       [ 180,  189],
       [ 190,  199],
       [ 200,  209],
       [ 210,  219],
       [ 220,  229],
       [ 230,  239],
       [ 240,  249],
       [ 250,  259],
       [ 260,  269],
       [ 270,  279],
       [ 280,  289],
       [ 290,  299],
       [ 300,  309],
       [ 310,  319],
       [ 320,  329],
       [ 330,  339],
       [ 340,  349],
       [ 350,  359],
       [ 360,  369],
       [ 370,  379],
       [ 380,  389],
       [ 390,  399],
       [ 400,  409],
       [ 410,  419],
       [ 420,  429],
       [ 430,  439],
       [ 440,  449],
       [ 450,  459],
       [ 460,  469],
       [ 470,  479],
       [ 480,  489],
       [ 490,  499],
       [ 500,  509],
       [ 510,  519],
       [ 520,  529],
       [ 530,  539],
       [ 540,  549],
       [ 550,  559],
       [ 560,  569],
       [ 570,  579],
       [ 580,  589],
       [ 590,  599],
       [ 600,  609],
       [ 610,  619],
       [ 620,  629],
       [ 630,  639],
       [ 640,  649],
       [ 650,  659],
       [ 660,  669],
       [ 670,  679],
       [ 680,  689],
       [ 690,  699],
       [ 700,  709],
       [ 710,  719],
       [ 720,  729],
       [ 730,  739],
       [ 740,  749],
       [ 750,  759],
       [ 760,  769],
       [ 770,  779],
       [ 780,  789],
       [ 790,  799],
       [ 800,  809],
       [ 810,  819],
       [ 820,  829],
       [ 830,  839],
       [ 840,  849],
       [ 850,  859],
       [ 860,  869],
       [ 870,  879],
       [ 880,  889],
       [ 890,  899],
       [ 900,  909],
       [ 910,  919],
       [ 920,  929],
       [ 930,  939],
       [ 940,  949],
       [ 950,  959],
       [ 960,  969],
       [ 970,  979],
       [ 980,  989],
       [ 990,  999],
    #    [1000, 1009],
    #    [1010, 1019],
    #    [1020, 1029],
    #    [1030, 1039],
    #    [1040, 1049],
    #    [1050, 1059],
    #    [1060, 1069],
    #    [1070, 1079],
    #    [1080, 1089],
    #    [1090, 1099],
    #    [1100, 1109],
    #    [1110, 1119],
    #    [1120, 1129],
    #    [1130, 1139],
    #    [1140, 1149],
    #    [1150, 1159],
    #    [1160, 1169],
    #    [1170, 1179],
    #    [1180, 1189],
    #    [1190, 1199],
    #    [1200, 1209],
    #    [1210, 1219],
    #    [1220, 1229],
    #    [1230, 1239],
    #    [1240, 1249],
    #    [1250, 1259],
    #    [1260, 1269],
    #    [1270, 1279],
    #    [1280, 1289],
    #    [1290, 1299],
    #    [1300, 1309],
    #    [1310, 1319],
    #    [1320, 1329],
    #    [1330, 1339],
    #    [1340, 1349],
    #    [1350, 1359],
    #    [1360, 1369],
    #    [1370, 1379],
    #    [1380, 1389],
    #    [1390, 1399],
    #    [1400, 1409],
    #    [1410, 1419],
    #    [1420, 1429],
    #    [1430, 1439],
    #    [1440, 1449],
    #    [1450, 1459],
    #    [1460, 1469],
    #    [1470, 1479],
    #    [1480, 1489],
    #    [1490, 1499],
    #    [1500, 1509],
    #    [1510, 1519],
    #    [1520, 1529],
    #    [1530, 1539],
    #    [1540, 1549],
    #    [1550, 1559],
    #    [1560, 1569],
    #    [1570, 1579],
    #    [1580, 1589],
    #    [1590, 1599],
    #    [1600, 1609],
    #    [1610, 1619],
    #    [1620, 1629],
    #    [1630, 1639],
    #    [1640, 1649],
    #    [1650, 1659],
    #    [1660, 1669],
    #    [1670, 1679],
    #    [1680, 1689],
    #    [1690, 1699],
    #    [1700, 1709],
    #    [1710, 1719],
    #    [1720, 1729],
    #    [1730, 1739],
    #    [1740, 1749],
    #    [1750, 1759],
    #    [1760, 1769],
    #    [1770, 1779],
    #    [1780, 1789],
    #    [1790, 1799],
    #    [1800, 1809],
    #    [1810, 1819],
    #    [1820, 1829],
    #    [1830, 1839],
    #    [1840, 1849],
    #    [1850, 1859],
    #    [1860, 1869],
    #    [1870, 1879],
    #    [1880, 1889],
    #    [1890, 1899],
    #    [1900, 1909],
    #    [1910, 1919],
    #    [1920, 1929],
    #    [1930, 1939],
    #    [1940, 1949],
    #    [1950, 1959],
    #    [1960, 1969],
    #    [1970, 1979],
    #    [1980, 1989],
    #    [1990, 1999],
    #    [2000, 2009],
    #    [2010, 2019],
    #    [2020, 2029],
    #    [2030, 2039],
    #    [2040, 2049],
    #    [2050, 2059],
    #    [2060, 2069],
    #    [2070, 2079],
    #    [2080, 2089],
    #    [2090, 2099],
    #    [2100, 2109],
    #    [2110, 2119],
    #    [2120, 2129],
    #    [2130, 2139],
    #    [2140, 2149],
    #    [2150, 2159],
    #    [2160, 2169],
    #    [2170, 2179],
    #    [2180, 2189],
    #    [2190, 2199],
    #    [2200, 2209],
    #    [2210, 2219],
    #    [2220, 2229],
    #    [2230, 2239],
    #    [2240, 2249],
    #    [2250, 2259],
    #    [2260, 2269],
    #    [2270, 2279],
    #    [2280, 2289],
    #    [2290, 2299],
    #    [2300, 2309],
    #    [2310, 2319],
    #    [2320, 2329],
    #    [2330, 2339],
    #    [2340, 2349],
    #    [2350, 2359],
    #    [2360, 2369],
    #    [2370, 2379],
    #    [2380, 2389],
    #    [2390, 2399],
    #    [2400, 2409],
    #    [2410, 2419],
    #    [2420, 2429],
    #    [2430, 2439],
    #    [2440, 2449],
    #    [2450, 2459],
    #    [2460, 2469],
    #    [2470, 2479],
    #    [2480, 2489],
    #    [2490, 2499],
    #    [2500, 2509],
    #    [2510, 2519],
    #    [2520, 2529],
    #    [2530, 2539],
    #    [2540, 2549],
    #    [2550, 2559],
    #    [2560, 2569],
    #    [2570, 2579],
    #    [2580, 2589],
    #    [2590, 2599],
    #    [2600, 2609],
    #    [2610, 2619],
    #    [2620, 2629],
    #    [2630, 2639],
    #     [2640, 2649],
    #     [2650, 2659],
    #     [2660, 2669],
    #     [2670, 2679],
    #     [2680, 2689],
    #     [2690, 2699],
    #     [2700, 2709],
    #     [2710, 2719],
    #     [2720, 2729],
    #     [2730, 2739],
    #     [2740, 2749],
    #     [2750, 2759],
    #     [2760, 2769],
    #     [2770, 2779],
    #     [2780, 2789],
    #     [2790, 2799],
    #     [2800, 2809],
    #     [2810, 2819],
    #     [2820, 2829],
    #     [2830, 2839],
    #     [2840, 2849],
    #     [2850, 2859],
    #     [2860, 2869],
    #     [2870, 2879],
    #     [2880, 2889],
    #     [2890, 2899],
    #     [2900, 2909],
    #     [2910, 2919],
    #     [2920, 2929],
    #     [2930, 2939],
    #     [2940, 2949],
    #     [2950, 2959],
    #     [2960, 2969],
    #     [2970, 2979],
    #     [2980, 2989]
       ])

    linear_equisized_bins_100 = np.array([[   0,   99],
       [ 100,  199],
       [ 200,  299],
       [ 300,  399],
       [ 400,  499],
       [ 500,  599],
       [ 600,  699],
       [ 700,  799],
       [ 800,  899],
       [ 900,  999],
       [1000, 1099],
       [1100, 1199],
       [1200, 1299],
       [1300, 1399],
       [1400, 1499],
       [1500, 1599],
       [1600, 1699],
       [1700, 1799],
       [1800, 1899],
       [1900, 1999],
       [2000, 2099],
       [2100, 2199],
       [2200, 2299],
       [2300, 2399],
       [2400, 2499],
       [2500, 2599],
       [2600, 2699],
       [2700, 2799],
       [2800, 2899]])


class Planckf(Enum):
    LFI_1 = '030'
    LFI_2 = '044'
    LFI_3 = '070'
    HFI_1 = '100'
    HFI_2 = '143'
    HFI_3 = '217'
    HFI_4 = '353'
    HFI_5 = '545'
    HFI_6 = '857'

    
class Plancks(Enum):
    # the order must be the same as the order of pospace function returns
    TT = "TT"
    EE = "EE"
    BB = "BB"
    TE = "TE"
    TB = "TB"
    EB = "EB"
    ET = "ET"
    BT = "BT"
    BE = "BE"


class Planckr(Enum):
    LFI = "LFI"
    HFI = "HFI"


class Helperfunctions:

    llp1e12 = lambda x: x*(x+1)*1e12/(2*np.pi)

    @staticmethod
    def bin_it(data, bins=Constants.SMICA_lowell_bins):
        ret = np.ones((*data.shape[:-1], len(bins)))
        for i in range(data.shape[0]):
            for j in range(data.shape[1]):
                for k in range(bins.shape[0]):
                    ret[i,j,k] = np.mean(np.nan_to_num(data[i,j,int(bins[k][0]):int(bins[k][1])]))
        return np.nan_to_num(ret)


    @staticmethod
    def bin_it1D(data, bins):
        ret = np.ones(len(bins))
        for k in range(bins.shape[0]):
            ret[k] = np.mean(np.nan_to_num(data[int(bins[k][0]):int(bins[k][1])]))
        return np.nan_to_num(ret)


    @staticmethod
    def multi(a,b):
        return a*b
    
    
    @staticmethod
    def reorder_spectrum_dict(spectrum):
        spec_data = dict()
        for f in spectrum.keys():
            for s in spectrum[f].keys():
                if s in spec_data:
                    spec_data[s].update({
                        f: spectrum[f][s]})
                else:
                    spec_data.update({s:{}})
                    spec_data[s].update({
                        f: spectrum[f][s]
                    })
        return spec_data


    @staticmethod
    def std_dev_binned(d, lmax=3000, binwidth=200, log=True):
        if log == False:
            bins = np.linspace(0, lmax+1, binwidth)
        else:
            bins = np.logspace(np.log10(1), np.log10(lmax+1), binwidth)

        bl = bins[:-1]
        br = bins[1:]
        if type(d) == np.ndarray:
            val = np.nan_to_num(d)
        elif type(d) == np.ma.core.MaskedArray:
            val = np.nan_to_num(d)
        else:
            val = np.nan_to_num(d.to_numpy())
        n, _ = np.histogram(
            np.linspace(0,lmax,lmax),
            bins=bins)
        sy, _ = np.histogram(
            np.linspace(0,lmax,lmax),
            bins=bins,
            weights=val)
        sy2, _ = np.histogram(
            np.linspace(0,lmax,lmax),
            bins=bins,
            weights=val * val)
        mean = sy / n
        std = np.sqrt(sy2/n - mean*mean)
        return mean, std, _


    @staticmethod
    def deprecated(func):
        """This is a decorator which can be used to mark functions
        as deprecated. It will result in a warning being emitted
        when the function is used."""
        @functools.wraps(func)
        def new_func(*args, **kwargs):
            warnings.simplefilter('always', DeprecationWarning)  # turn off filter
            warnings.warn("Call to deprecated function {}.".format(func.__name__),
                        category=DeprecationWarning,
                        stacklevel=2)
            warnings.simplefilter('default', DeprecationWarning)  # reset filter
            return func(*args, **kwargs)
        return new_func


# K_CMB to K_RJ conversion factors

# Instrument  Factor
# ------------------------------
# 030         0.9770745747972885
# 044         0.951460364644704
# 070         0.8824988010513074
# 100         0.7773000112639914
# 143         0.6048402898008157
# 217         0.3344250134127003
# 353         0.07754853977491984
# 545         0.006267933567707104
# 857         6.378414208594617e-05